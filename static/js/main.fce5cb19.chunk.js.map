{"version":3,"sources":["assets/logo.svg","../node_modules/colors/lib sync","components/test-words/test-words.tsx","components/test-words/index.tsx","components/automaton-viewer/automaton-viewer.tsx","routes/regular-language/regular-language.tsx","components/automaton-viewer/index.tsx","components/regular-expression/regular-expression.tsx","components/regular-expression/index.tsx","routes/regular-language/index.tsx","components/automaton-designer/helpers.tsx","utils/math.tsx","components/automaton-designer/edge/edge.tsx","components/automaton-designer/automaton-designer.tsx","components/automaton-designer/node/node.tsx","components/automaton-designer/index.tsx","routes/automata/index.tsx","routes/automata/automata.tsx","components/app/app.tsx","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","webpackEmptyContext","req","e","Error","code","keys","resolve","id","renderResultsHTML","automaton","words","expected","results","transitions","length","isValidAutomaton","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","str","value","strState","noam","fsm","isStringInLanguage","_unused","push","err","return","join","TestWords","_ref","testAccept","_useState","useState","_useState2","Object","slicedToArray","setWords","testType","react_default","a","createElement","className","toLowerCase","dangerouslySetInnerHTML","__html","split","input","TextArea","rows","onChange","event","target","ExpressionMenuOp","AutomatonViewer","automatonParent","React","createRef","Viz","Module","render","renderSVGElement","printDotFormat","then","svgElement","current","firstChild","removeChild","appendChild","catch","error","console","renderAutomaton","ref","Title","Content","ExpressionHelp","popover","placement","title","content","icon","type","style","color","RegularLanguage","expression","setExpression","_generateAutomaton","convertStatesToNumbers","minimize","convertNfaToDfa","convertEnfaToNfa","re","string","toAutomaton","name","generateAutomaton","_generateAutomaton2","layout","size","placeholder","prefix","suffix","tooltip","message","display","addonAfter","dropdown","trigger","overlay","menu","onClick","click","key","RANDOM","simplify","random","SIMPLIFY","Item","components_test_words","components_automaton_viewer","getMousePosition","offset","arguments","x","y","CTM","currentTarget","getScreenCTM","clientX","clientY","f","d","getStateFromElement","element","SVGGElement","classList","contains","dataset","state","parentElement","getTransitionFromElement","from","to","symbol","getStatePosition","position","statePositions","setAcceptingState","accepting","isAcceptingState","addAcceptingState","acceptingStates","filter","updateTransitions","transition","newSymbol","transitionAngle","newArr","Boolean","oldArr","alphabet","includes","addSymbol","addTransition","transitionAngles","concat","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","index","fromState","toStates","splice","s","fixed","number","toFixed","replace","angleOfLine","center","point","offsetAngle","anchorAngle","Math","atan2","PI","closestPointOnCircle","circle","dx","cx","dy","cy","scale","sqrt","r","getStateRadius","ObjectType","DraggingMode","Edge","start","end","toState","mousePosition","selected","dragging","commands","fromRadius","mpoint","arrow","label","edge_EdgeArrow","angle","textAngle","edge_EdgeLabel","text","stuff","radius","circleX","cos","circleY","sin","circleRadius","startAngle","endAngle","startX","startY","endX","endY","getEndPointsAndCircle","useGreaterThan180","abs","edgeClass","classNames","edge","linking","dataProps","data-from","data-to","data-symbol","assign","EdgeArrow","_ref2","EdgeLabel","_ref3","adjustX","adjustY","slide","pow","round","Node","translate","isAccepting","isInitial","initialState","nodeClass","node","accept","initialStateArrow","xOffset","points","transform","data-state","canRunAutomaton","states","nextSymbol","db","nextSymbolIndex","testWord","currentStates","makeTransition","iteratingUntilEnd","isWordInLanguage","word","AutomatonDesigner","onUpdate","selectedObject","setSelectedObject","_useState3","_useState4","draggingMode","setDraggingMode","_useState5","_useState6","draggingOffset","setDraggingOffset","_useState7","_useState8","mouseLocation","setMouseLocation","_useState9","_useState10","debuggingMode","setDebuggingMode","_useState11","_useState12","setTestWord","linkingEdge","NODE","LINKING","edge_Edge","resetDebuggingHandler","computeEpsilonClosure","resetAutomaton","useEffect","intervalId","window","setInterval","clearInterval","map","symbolClass","consumed","disabled","es_button","readString","substring","previousSymbol","esm","keyName","onKeyUp","shortcut","handle","objectSpread","t","removeState","EDGE","_key$split","_key$split2","removeTransition","onDoubleClick","prompt","nextState","reduce","acc","max","parseInt","substr","getNextState","addState","setInitialState","onMouseDown","currentPosition","shiftKey","DRAGGING","onMouseUp","onMouseLeave","onMouseMove","node_Node","unpacked","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","Array","item","get","symbols","set","Map","values","groupByTransitions","edgeKey","sort","Automata","makeNew","setAutomaton","components_automaton_designer","Header","Layout","Sider","getKeyFromLocation","pathname","location","log","SiderWithRouter","withRouter","objectWithoutProperties","width","theme","selectedKeys","react_router_dom","App","src","logo","alt","href","app_Content","react_router","exact","path","component","hostname","match","ReactDOM","components_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fce5cb19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 131;","import React, { useState } from 'react';\nimport { Input } from 'antd';\nimport noam from 'noam';\n\nimport './test-words.css';\n\nfunction isValidAutomaton(automaton: any): boolean {\n    return automaton && automaton.transitions.length > 0;\n}\n\nfunction renderResultsHTML(automaton: any, words: Array<string>, expected: boolean): string {\n    var results: Array<string> = [];\n\n    if (!isValidAutomaton(automaton)) {\n        return '';\n    }\n\n    for (let str of words) {\n        var strState: string = expected ? 'invalid' : 'valid';\n\n        try {\n            if (noam.fsm.isStringInLanguage(automaton, str)) {\n                strState = expected ? 'valid' : 'invalid';\n            }\n        } catch {\n            //\n        }\n\n        results.push('<span class=\"' + strState + '\">' + str + '</span>');\n    }\n\n    return results.join('');\n}\n\nexport const TestWords: React.FC<{ automaton: any, testAccept: boolean }> = ({ automaton, testAccept }) => {\n    const [words, setWords] = useState('');\n\n    const testType: string = (testAccept ? 'Accept' : 'Reject');\n\n    return (\n        <div className={'test-words ' + testType.toLowerCase()}>\n            <h2>{testType}</h2>\n\n            <div className=\"container\">\n                <div className=\"backdrop\">\n                    <div className=\"highlights\" dangerouslySetInnerHTML={{\n                        __html:\n                            renderResultsHTML(automaton, words.split('\\n'), testAccept)\n                    }}>\n                    </div>\n                </div>\n                <Input.TextArea rows={8}\n                    onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => setWords(event.target.value)}\n                />\n            </div>\n        </div>\n    );\n}","import { TestWords } from './test-words';\n\nexport default TestWords;","import React from 'react';\nimport noam from 'noam';\nimport Viz from 'viz.js';\nimport { Module, render } from 'viz.js/full.render.js';\n\nimport './automaton-viewer.css';\n\nfunction isValidAutomaton(automaton: any): boolean {\n    return automaton && automaton.transitions.length > 0;\n}\n\nfunction renderAutomaton(automaton: any, automatonParent: React.RefObject<HTMLDivElement>): void {\n    if (!isValidAutomaton(automaton)) {\n        return;\n    }\n\n    (new Viz({ Module, render }))\n        .renderSVGElement(noam.fsm.printDotFormat(automaton))\n        .then((svgElement) => {\n            if (!automatonParent.current) {\n                return;\n            }\n\n            while (automatonParent.current.firstChild) {\n                automatonParent.current.removeChild(automatonParent.current.firstChild);\n            }\n\n            if (isValidAutomaton(automaton)) {\n                automatonParent.current.appendChild(svgElement);\n            }\n        })\n        .catch(error => {\n            console.error(error);\n        });\n}\n\nexport const AutomatonViewer: React.FC<{ automaton: any }> = ({ automaton }) => {\n    const automatonParent: React.RefObject<HTMLDivElement> = React.createRef();\n\n    renderAutomaton(automaton, automatonParent);\n\n    return (\n        <div className=\"automaton-viewer-container\" ref={automatonParent} />\n    );\n}","import React, { useState } from 'react';\nimport {\n    Dropdown,\n    Icon,\n    Input,\n    Layout,\n    Menu,\n    Tooltip,\n} from 'antd';\nimport { ClickParam } from \"antd/lib/menu\"\n\nimport noam from 'noam';\n\nimport TestWords from '../../components/test-words';\nimport AutomatonViewer from '../../components/automaton-viewer';\nimport ExpressionHelp from '../../components/regular-expression';\n\nimport './regular-language.css';\n\nfunction generateAutomaton(expression: string): any {\n    try {\n        const automaton = noam.fsm.convertStatesToNumbers(\n            noam.fsm.minimize(\n                noam.fsm.convertNfaToDfa(\n                    noam.fsm.convertEnfaToNfa(\n                        noam.re.string.toAutomaton(expression)))));\n\n        return [automaton, null];\n    } catch (error) {\n        if (error.name === \"RegexError\") {\n            return [null, error];\n        }\n    }\n\n    return;\n}\n\nenum ExpressionMenuOp {\n    RANDOM = \"random\",\n    SIMPLIFY = \"simplify\",\n}\n\nexport const RegularLanguage: React.FC = () => {\n    const [expression, setExpression] = useState('');\n\n    const handleExpressionMenuClick = (click: ClickParam) => {\n        switch (click.key) {\n            case ExpressionMenuOp.RANDOM: {\n                setExpression(\n                    noam.re.string.simplify(\n                        noam.re.string.random(5, \"ab\", {})));\n                break;\n            }\n            case ExpressionMenuOp.SIMPLIFY: {\n                /** TODO:\n                 * write the simplify steps to the log\n                 * allow debugging the simplification with step forward and explanation\n                 */\n                setExpression(noam.re.string.simplify(expression));\n                break;\n            }\n        }\n    }\n\n    const [automaton, error] = generateAutomaton(expression);\n\n    return (\n        <Layout>\n            <h1>Expression</h1>\n            <Input size=\"large\" placeholder=\"Write your regular expression\"\n                value={expression}\n                prefix={ExpressionHelp}\n                suffix={\n                    <Tooltip placement=\"topRight\" title={error ? error.message : ''}>\n                        <Icon type=\"close\" style={{ color: 'red', display: (!error ? 'none' : 'inherit') }} />\n                    </Tooltip>\n                }\n                addonAfter={\n                    <Dropdown\n                        placement=\"bottomRight\"\n                        trigger={['click']}\n                        overlay={\n                            <Menu onClick={handleExpressionMenuClick}>\n                                <Menu.Item key={ExpressionMenuOp.RANDOM}>Generate random expression</Menu.Item>\n                                <Menu.Item key={ExpressionMenuOp.SIMPLIFY}>Simplify expression</Menu.Item>\n                            </Menu>\n                        }>\n                        <Icon type=\"menu\" />\n                    </Dropdown>\n                }\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => setExpression(event.target.value)}\n            />\n            <h1>Words</h1>\n            <TestWords automaton={automaton} testAccept={true} />\n            <TestWords automaton={automaton} testAccept={false} />\n            <h1>Deterministic Finite Automaton</h1>\n            <AutomatonViewer automaton={automaton} />\n        </Layout>\n    );\n}","import {AutomatonViewer} from './automaton-viewer';\n\nexport default AutomatonViewer;","import React from 'react';\nimport { Icon, Popover } from 'antd';\n\nconst Title = (\n    <span>What is a regular expression?</span>\n);\n\nconst Content = (\n    <div>\n        <p>A regular expression (over an alphabet Σ) is a string consisting of symbols from Σ, plus symbols from the list <em>+</em>, <em>*</em>, <em>(</em>, <em>)</em>, <em>$</em>.</p>\n        <ul>\n            <li><strong>+</strong> (alteration operator, ∪)</li>\n            <li><strong>∗</strong> (Kleene star); 0 or more symbols</li>\n            <li><strong>(</strong>; start grouping</li>\n            <li><strong>)</strong>; end grouping</li>\n            <li><strong>$</strong> (epsilon, ε); empty string</li>\n            <li><strong>\\</strong> (backslash); used for escaping the special meaning of all the listed characters, including backslash itself</li>\n        </ul>\n\n        <p>Example: <code>a(a+b)*</code></p>\n        <p>= all words starting with a, followed by any word over {'{a, b}'}</p>\n        <p>= all words over the alphabet {'{a, b}'} starting with a</p>\n    </div>\n);\n\nexport const ExpressionHelp = (\n    <Popover placement=\"rightTop\"\n        title={Title}\n        content={Content}>\n        <Icon type=\"question-circle\" style={{ color: 'rgba(0,0,0,.45)' }} />\n    </Popover>\n);","import { ExpressionHelp } from './regular-expression';\n\nexport default ExpressionHelp;","import { RegularLanguage } from './regular-language';\n\nexport default RegularLanguage;","import noam from 'noam';\n\nimport { Point } from '../../utils/math';\n\nexport function getMousePosition(e: React.MouseEvent, offset: Point = { x: 0, y: 0 }): Point {\n    const svg = e.currentTarget as SVGSVGElement;\n    const CTM = svg.getScreenCTM() as DOMMatrix;\n\n    return {\n        x: (e.clientX - CTM.e + offset.x) / CTM.a,\n        y: (e.clientY - CTM.f + offset.y) / CTM.d\n    };\n}\n\nexport function getStateFromElement(element: Element): string | null {\n    if (element instanceof SVGGElement && element.classList.contains('node')) {\n        return element.dataset.state || null;\n    } else if (element.parentElement instanceof SVGGElement) {\n        return getStateFromElement(element.parentElement);\n    } else {\n        return null;\n    }\n}\n\nexport function getTransitionFromElement(element: Element): { from: string, to: string, symbol: string } | null {\n    if (element instanceof SVGGElement && element.classList.contains('edge')) {\n        return {\n            from: element.dataset.from || '',\n            to: element.dataset.to || '',\n            symbol: element.dataset.symbol || '',\n        }\n    } else if (element.parentElement instanceof SVGGElement) {\n        return getTransitionFromElement(element.parentElement);\n    } else {\n        return null;\n    }\n}\n\nexport function getStatePosition(automaton: any, state: string): Point {\n    const position = automaton.statePositions[state];\n    return {\n        x: position.x + 22,\n        y: position.y + 22,\n    }\n}\n\nexport function getNextState(automaton: any): string {\n    const nextState: number = automaton.states.reduce(\n        (acc: number, state: string) => Math.max(acc, parseInt(state.substr(1))), -1);\n    return 's' + (nextState + 1);\n}\n\nexport function setAcceptingState(automaton: any, state: string, accepting: boolean): void {\n    if (accepting) {\n        if (!noam.fsm.isAcceptingState(automaton, state)) {\n            noam.fsm.addAcceptingState(automaton, state);\n        }\n    } else {\n        automaton.acceptingStates = automaton.acceptingStates.filter((e: string) => e !== state);\n    }\n}\n\nexport function addState(automaton: any, state: string, position: Point): void {\n    noam.fsm.addState(automaton, state);\n    if (!automaton.statePositions) {\n        automaton.statePositions = [];\n    }\n\n    automaton.statePositions[state] = position;\n\n    if (automaton.states.length === 1) {\n        noam.fsm.setInitialState(automaton, state);\n    }\n}\n\nexport function removeState(automaton: any, state: string): void {\n    if (automaton.initialState === state) {\n        automaton.initialState = '';\n    }\n    automaton.states = automaton.states.filter((s: string) => s !== state);\n    delete automaton.statePositions[state];\n    automaton.acceptingStates = automaton.acceptingStates.filter((s: string) => s !== state);\n    automaton.transitions.map((t: NoamAutomatonTransition) => t.toStates.filter((s: string) => s !== state));\n    automaton.transitions = automaton.transitions.filter(\n        (t: NoamAutomatonTransition) => (t.fromState !== state) &&\n            t.toStates.length > 0 &&\n            !(t.toStates.length === 1 && t.toStates.includes(state)));\n}\n\nexport function removeTransition(automaton: any, key: string): void {\n    delete automaton.transitionAngles[key];\n\n    const [fromState, toState] = key.split('-');\n    automaton.transitions = automaton.transitions.filter(\n        (t: NoamAutomatonTransition) => !(t.fromState === fromState && t.toStates.length === 1 && t.toStates.includes(toState)));\n\n}\n\nexport function updateTransitions(\n    automaton: any,\n    transition: { from: string, to: string, symbol: string },\n    newSymbol: string,\n    transitionAngle?: number,\n): any {\n    const newArr = newSymbol.split(',').filter(Boolean);\n    const oldArr = transition.symbol.split(',').filter(Boolean);\n\n    // Add transitions\n    for (const symbol of newArr) {\n        if (!automaton.alphabet.includes(symbol)) {\n            noam.fsm.addSymbol(automaton, symbol);\n        }\n\n        noam.fsm.addTransition(automaton, transition.from, [transition.to], symbol);\n\n        if (transitionAngle) {\n            if (!automaton.transitionAngles) {\n                automaton.transitionAngles = [];\n            }\n            automaton.transitionAngles[`${transition.from}-${transition.to}`] = transitionAngle;\n        }\n    }\n\n    // Remove transitions\n    for (const symbol of oldArr) {\n        if (newArr.includes(symbol)) {\n            continue;\n        }\n\n        for (const index in (automaton.transitions as NoamAutomatonTransitions)) {\n            const value = automaton.transitions[index] as NoamAutomatonTransition;\n            if (value.fromState !== transition.from || !value.toStates.includes(transition.to) || value.symbol !== symbol) {\n                continue;\n            }\n\n            if (value.toStates.length === 1) {\n                automaton.transitions.splice(index, 1);\n            } else {\n                automaton.transitions[index] = value.toStates.filter((s: string) => s !== transition.to);\n            }\n        }\n    }\n\n    return automaton;\n}\n\ntype NoamAutomatonTransition = { fromState: string, toStates: Array<string>, symbol: string };\ntype NoamAutomatonTransitions = Array<NoamAutomatonTransition>;\n\nexport function groupByTransitions(transitions: NoamAutomatonTransitions):\n    Array<{ fromState: string, toState: string, symbols: Array<string> }> {\n\n    const unpacked = []\n    for (const transition of transitions) {\n        for (const toState of transition.toStates) {\n            unpacked.push({\n                fromState: transition.fromState,\n                toState: toState,\n                symbol: transition.symbol\n            });\n        }\n    }\n\n    return Array.from(\n        unpacked.reduce((acc, t) => {\n            const key = t.fromState + '-' + t.toState;\n\n            const item: { fromState: string, toState: string, symbols: Array<string> } = acc.get(key) || {\n                fromState: t.fromState,\n                toState: t.toState,\n                symbols: []\n            };\n\n            item.symbols.push(t.symbol);\n\n            return acc.set(key, item);\n        }, new Map<string, { fromState: string, toState: string, symbols: Array<string> }>()).values());\n}","export type Point = {\n    readonly x: number;\n    readonly y: number;\n}\n\nexport type Circle = {\n    readonly cx: number;\n    readonly cy: number;\n    readonly r: number;\n}\n\n/**\n * Return a number with 2 digits precision on the fraction part.\n * \n * @param number \n */\nexport function fixed(number: number): string {\n    return number.toFixed(2).replace(/0+$/, '').replace(/\\.$/, '');\n}\n\n/**\n * Return the midpoint between two points.\n * \n * @param start\n * @param end\n */\nexport function midpoint(start: Point, end: Point): Point {\n    return {\n        x: (start.x + end.x) / 2,\n        y: (start.y + end.y) / 2,\n    }\n}\n\n/**\n * Return the angle of the line defined by two points and the horizontal axis.\n * \n * @param center \n * @param point \n * @param offsetAngle \n */\nexport function angleOfLine(center: Point, point: Point, offsetAngle: number = 0): number {\n    var anchorAngle = Math.atan2(point.y - center.y, point.x - center.x) + offsetAngle;\n    if (anchorAngle < -Math.PI) {\n        anchorAngle += 2 * Math.PI;\n    }\n\n    if (anchorAngle > Math.PI) {\n        anchorAngle -= 2 * Math.PI;\n    }\n    return anchorAngle;\n};\n\n\n/**\n * Return the point within a circle that is closest to the specific point.\n * \n * @param circle \n * @param point \n */\nexport function closestPointOnCircle(circle: Circle, point: Point): Point {\n    var dx = point.x - circle.cx;\n    var dy = point.y - circle.cy;\n    var scale = Math.sqrt(dx * dx + dy * dy);\n\n    return {\n        x: circle.cx + dx * circle.r / scale,\n        y: circle.cy + dy * circle.r / scale,\n    };\n};","import React from 'react';\nimport classNames from 'classnames';\nimport noam from 'noam';\n\nimport {\n    getStatePosition,\n} from '../helpers';\nimport {\n    Point,\n    fixed,\n    midpoint,\n    closestPointOnCircle,\n    angleOfLine,\n} from '../../../utils/math';\n\nimport './edge.css';\n\nfunction getStateRadius(automaton: any, state: string): number {\n    return noam.fsm.isAcceptingState(automaton, state) ? 22 : 18;\n}\n\nfunction getEndPointsAndCircle(circle: Point, radius: number, anchorAngle: number) {\n    var circleX = circle.x + 1.5 * radius * Math.cos(anchorAngle);\n    var circleY = circle.y + 1.5 * radius * Math.sin(anchorAngle);\n    var circleRadius = 0.75 * radius;\n    var startAngle = anchorAngle - Math.PI * 0.8;\n    var endAngle = anchorAngle + Math.PI * 0.8;\n    var startX = circleX + circleRadius * Math.cos(startAngle);\n    var startY = circleY + circleRadius * Math.sin(startAngle);\n    var endX = circleX + circleRadius * Math.cos(endAngle);\n    var endY = circleY + circleRadius * Math.sin(endAngle);\n    return {\n        startX: startX,\n        startY: startY,\n        endX: endX,\n        endY: endY,\n        startAngle: startAngle,\n        endAngle: endAngle,\n        circleX: circleX,\n        circleY: circleY,\n        circleRadius: circleRadius\n    };\n};\n\nexport const Edge: React.FC<{\n    automaton: any,\n    fromState: string,\n    toState?: string | null,\n    symbol?: string,\n    mousePosition?: Point,\n    selected: boolean,\n    dragging: boolean,\n}> = ({ automaton, fromState, toState, symbol, mousePosition, selected, dragging }) => {\n    const commands: Array<string> = [];\n\n    var from = getStatePosition(automaton, fromState);\n    const fromRadius = getStateRadius(automaton, fromState);\n    var to = toState ? getStatePosition(automaton, toState) : mousePosition!;\n    const mpoint = mousePosition || midpoint(from, to);\n\n    var arrow = null;\n    var label = null;\n\n    if (fromState !== toState) {\n        from = closestPointOnCircle({ cx: from.x, cy: from.y, r: fromRadius }, mpoint);\n        to = toState ? closestPointOnCircle({ cx: to.x, cy: to.y, r: getStateRadius(automaton, toState) }, from) : mpoint;\n\n        // The \"lineto\" commands\n        // https://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands\n        commands.push(`M${fixed(from.x)},${fixed(from.y)}`); // starting point\n        commands.push(`L${fixed(to.x)},${fixed(to.y)}`); // end point\n\n        arrow = <EdgeArrow point={to} angle={Math.atan2(to.y - from.y, to.x - from.x)} />;\n\n        var textAngle = Math.atan2(to.x - from.x, from.y - to.y);\n        label = <EdgeLabel point={mpoint} text={symbol || ''} angle={textAngle} />;\n    } else {\n        const anchorAngle = mousePosition ? angleOfLine(from, mousePosition) : automaton.transitionAngles[`${fromState}-${toState}`];\n        const stuff = getEndPointsAndCircle(from, fromRadius, anchorAngle);\n\n        if (stuff.endAngle < stuff.startAngle) {\n            stuff.endAngle += Math.PI * 2;\n        }\n\n        const startX = stuff.circleX + stuff.circleRadius * Math.cos(stuff.startAngle);\n        const startY = stuff.circleY + stuff.circleRadius * Math.sin(stuff.startAngle);\n        const endX = stuff.circleX + stuff.circleRadius * Math.cos(stuff.endAngle);\n        const endY = stuff.circleY + stuff.circleRadius * Math.sin(stuff.endAngle);\n        const useGreaterThan180 = (Math.abs(stuff.endAngle - stuff.startAngle) > Math.PI) ? '1' : '0';\n\n        // The elliptical arc curve commands\n        // https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\n        commands.push(`M${fixed(startX)},${fixed(startY)}`); // starting point\n        commands.push(`A${fixed(stuff.circleRadius)},${fixed(stuff.circleRadius)}`); // radii\n        commands.push('0'); // perfect circle\n        commands.push(useGreaterThan180); // large-arc-flag\n        commands.push('1'); // sweep-flag, arc drawn in a positive angle\n        commands.push(`${fixed(endX)},${fixed(endY)}`); // end point\n\n        arrow = <EdgeArrow point={{ x: stuff.endX, y: stuff.endY }} angle={stuff.endAngle + Math.PI * 0.4} />;\n        label = <EdgeLabel point={{\n            x: stuff.circleX + stuff.circleRadius * Math.cos(anchorAngle),\n            y: stuff.circleY + stuff.circleRadius * Math.sin(anchorAngle),\n        }} text={symbol || ''} angle={anchorAngle} />;\n    }\n\n    const edgeClass = classNames({\n        edge: true,\n        dragging: dragging,\n        selected: selected,\n        linking: mousePosition,\n    })\n\n    var dataProps = {};\n    if (!mousePosition) {\n        dataProps = {\n            'data-from': fromState,\n            'data-to': toState,\n            'data-symbol': symbol,\n        };\n    }\n\n    return (\n        <g className={edgeClass} {...dataProps}>\n            <path className=\"line\" d={commands.join(' ')} />\n            {arrow}\n            {label}\n        </g>\n    );\n}\n\nconst EdgeArrow: React.FC<{\n    point: Point,\n    angle: number\n}> = ({ point, angle }) => {\n    const dx = Math.cos(angle);\n    const dy = Math.sin(angle);\n\n    const commands: Array<string> = []\n    commands.push(`M${fixed(point.x)},${fixed(point.y)}`);\n    commands.push(`L${fixed(point.x - 8 * dx + 5 * dy)},${fixed(point.y - 8 * dy - 5 * dx)}`);\n    commands.push(`${fixed(point.x - 8 * dx - 5 * dy)},${fixed(point.y - 8 * dy + 5 * dx)}`);\n\n    return (\n        <path className=\"arrow\" d={commands.join(' ')} />\n    );\n}\n\nconst EdgeLabel: React.FC<{\n    point: Point,\n    text: string,\n    angle?: number,\n}> = ({ point, text, angle }) => {\n    var x = point.x;\n    var y = point.y;\n\n    if (angle !== null && angle !== undefined) {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n        const adjustX = 5 * (cos > 0 ? 1 : -1);\n        const adjustY = (10 + 5) * (sin > 0 ? 1 : -1);\n        const slide = sin * Math.pow(Math.abs(sin), 40) * adjustX - cos * Math.pow(Math.abs(cos), 10) * adjustY;\n        x += adjustX - sin * slide;\n        y += adjustY + cos * slide;\n    }\n\n    x = Math.round(x);\n    y = Math.round(y);\n\n    return (\n        <text x={fixed(x)} y={fixed(y + 6)}>{text}</text>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport Hotkeys from 'react-hot-keys';\nimport { HotkeysEvent } from 'hotkeys-js';\nimport { Input, Button, Tooltip, Icon } from 'antd';\nimport noam from 'noam';\n\nimport { Edge } from './edge/edge';\nimport { Node } from './node/node';\nimport {\n    getStateFromElement,\n    getMousePosition,\n    getStatePosition,\n    getTransitionFromElement,\n    groupByTransitions,\n    updateTransitions,\n    addState,\n    removeState,\n    setAcceptingState,\n    getNextState,\n    removeTransition\n} from './helpers';\nimport { Point, angleOfLine } from '../../utils/math';\n\nimport './automaton-designer.css';\n\ntype DebuggingMode = {\n    currentStates: Array<string>,\n    testWord: string,\n    nextSymbolIndex: number,\n    iteratingUntilEnd: Boolean,\n};\n\nenum ObjectType { NODE, EDGE }\nenum DraggingMode { DRAGGING, LINKING }\n\nfunction canRunAutomaton(automaton: any): Boolean {\n    return automaton.states.length > 0 && automaton.initialState;\n}\n\nfunction resetAutomaton(automaton: any, word: string): DebuggingMode {\n    return {\n        currentStates: noam.fsm.computeEpsilonClosure(automaton, [automaton.initialState]),\n        testWord: word,\n        nextSymbolIndex: 0,\n        iteratingUntilEnd: false,\n    };\n}\n\nfunction previousSymbol(automaton: any, db: DebuggingMode): DebuggingMode {\n    if (db.nextSymbolIndex <= 0) {\n        return db;\n    }\n\n    return {\n        currentStates: noam.fsm.readString(automaton, db.testWord.substring(0, db.nextSymbolIndex - 1).split('')),\n        testWord: db.testWord,\n        nextSymbolIndex: db.nextSymbolIndex - 1,\n        iteratingUntilEnd: false,\n    };\n}\n\nfunction nextSymbol(automaton: any, db: DebuggingMode): DebuggingMode {\n    if (db.nextSymbolIndex >= db.testWord.length) {\n        return db;\n    }\n\n    return {\n        currentStates: noam.fsm.makeTransition(automaton, db.currentStates, db.testWord[db.nextSymbolIndex]),\n        testWord: db.testWord,\n        nextSymbolIndex: db.nextSymbolIndex + 1,\n        iteratingUntilEnd: db.iteratingUntilEnd,\n    };\n}\n\nfunction isWordInLanguage(automaton: any, word: string): Boolean {\n    try {\n        return noam.fsm.isStringInLanguage(automaton, word);\n    } catch {\n        return false;\n    }\n}\n\nexport const AutomatonDesigner: React.FC<{ automaton: any, onUpdate: (automaton: any) => void }> = ({ automaton, onUpdate }) => {\n\n    const [selectedObject, setSelectedObject] = useState<{ type: ObjectType, key: string } | null>();\n    const [draggingMode, setDraggingMode] = useState<DraggingMode | null>();\n    const [draggingOffset, setDraggingOffset] = useState<Point>();\n    const [mouseLocation, setMouseLocation] = useState<{ position: Point, state: string | null }>({ position: { x: 0, y: 0 }, state: null });\n    const [debuggingMode, setDebuggingMode] = useState<DebuggingMode | null>();\n    const [testWord, setTestWord] = useState('');\n\n    const doubleClickHandler = (e: React.MouseEvent) => {\n        const element = e.target as Element;\n        automaton = { ...automaton };\n\n        const state = getStateFromElement(element);\n        if (state) {\n            setAcceptingState(automaton, state, !noam.fsm.isAcceptingState(automaton, state));\n            setSelectedObject({ type: ObjectType.NODE, key: state });\n        } else {\n            const transition = getTransitionFromElement(element);\n            if (transition) {\n                const symbol = prompt('Modify the transition symbol', transition.symbol);\n                if (symbol !== null) {\n                    automaton = updateTransitions(automaton, transition, symbol || '');\n                }\n                setSelectedObject({ type: ObjectType.EDGE, key: `${transition.from}-${transition.to}` });\n            } else {\n                const nextState = getNextState(automaton);\n                addState(automaton, nextState, getMousePosition(e, { x: -22, y: -22 }));\n                setSelectedObject({ type: ObjectType.NODE, key: nextState });\n            }\n        }\n\n        onUpdate(automaton);\n    }\n\n    const mouseDownHandler = (e: React.MouseEvent) => {\n        const element = e.target as Element;\n        const currentPosition = getMousePosition(e);\n\n        const state = getStateFromElement(element);\n        if (state) {\n            setSelectedObject({ type: ObjectType.NODE, key: state });\n\n            const draggingMode = e.shiftKey ? DraggingMode.LINKING : DraggingMode.DRAGGING;\n            setDraggingMode(draggingMode);\n\n            switch (draggingMode) {\n                case DraggingMode.DRAGGING:\n                    setDraggingOffset({\n                        x: automaton.statePositions[state].x - currentPosition.x,\n                        y: automaton.statePositions[state].y - currentPosition.y,\n                    });\n                    break;\n                case DraggingMode.LINKING:\n                    setMouseLocation({ position: currentPosition, state: state });\n                    break;\n            }\n        } else {\n            const transition = getTransitionFromElement(element);\n            if (transition) {\n                setSelectedObject({ type: ObjectType.EDGE, key: `${transition.from}-${transition.to}` });\n            } else {\n                setSelectedObject(null);\n            }\n        }\n    }\n\n    const mouseMoveHandler = (e: React.MouseEvent) => {\n        const element = e.target as Element;\n\n        switch (draggingMode) {\n            case DraggingMode.DRAGGING:\n                automaton = { ...automaton };\n                if (selectedObject && selectedObject.type === ObjectType.NODE) {\n                    automaton.statePositions[selectedObject.key] = getMousePosition(e, draggingOffset);\n                }\n                onUpdate(automaton);\n                break;\n\n            case DraggingMode.LINKING:\n                setMouseLocation({\n                    position: getMousePosition(e),\n                    state: getStateFromElement(element),\n                });\n                break;\n        }\n    }\n\n    const mouseUpHandler = (e: React.MouseEvent) => {\n        const element = e.target as Element;\n\n        if (draggingMode === DraggingMode.LINKING) {\n            const toState = getStateFromElement(element);\n\n            if (toState && selectedObject && selectedObject.type === ObjectType.NODE) {\n                const symbol = prompt(\"What is the transition symbol?\");\n                automaton = { ...automaton };\n                automaton = updateTransitions(\n                    automaton,\n                    {\n                        from: selectedObject.key,\n                        to: toState, symbol: ''\n                    },\n                    symbol || '',\n                    angleOfLine(getStatePosition(automaton, selectedObject.key), getMousePosition(e))\n                );\n\n                onUpdate(automaton);\n            }\n        }\n\n        setDraggingMode(null);\n    }\n\n    const mouseLeaveHandler = (e: React.MouseEvent) => {\n        setDraggingMode(null);\n    }\n\n    var linkingEdge = null;\n    if (selectedObject && selectedObject.type === ObjectType.NODE && draggingMode === DraggingMode.LINKING) {\n        linkingEdge = <Edge\n            automaton={automaton}\n            fromState={selectedObject.key}\n            toState={mouseLocation.state}\n            mousePosition={mouseLocation.position}\n            dragging={false}\n            selected={false}\n        />;\n    }\n\n    const keyUpHandler = (shortcut: string, e: KeyboardEvent, handle: HotkeysEvent) => {\n        if (!selectedObject) {\n            return;\n        }\n\n        automaton = { ...automaton };\n        switch (shortcut) {\n            case 'delete': // Remove current element\n                setSelectedObject(null);\n                switch (selectedObject.type) {\n                    case ObjectType.NODE:\n                        removeState(automaton, selectedObject.key);\n                        break;\n                    case ObjectType.EDGE:\n                        removeTransition(automaton, selectedObject.key);\n                        break;\n                }\n                break;\n\n            case 'shift+a': // Set state accepting\n                if (selectedObject.type === ObjectType.NODE) {\n                    setAcceptingState(automaton, selectedObject.key, !noam.fsm.isAcceptingState(automaton, selectedObject.key));\n                }\n                break;\n\n            case 'shift+i': // Set state as initial\n                if (selectedObject.type === ObjectType.NODE) {\n                    automaton.initialState = selectedObject.key;\n                }\n        }\n\n        onUpdate(automaton);\n    }\n\n    const startDebuggingHandler = (e: React.MouseEvent) => {\n        // TODO: adapt the input to be colorized and have symbols showing what is being read\n        resetDebuggingHandler(e);\n    }\n\n    const stopDebuggingHandler = (e: React.MouseEvent) => {\n        // TODO: revert to normal input\n        setDebuggingMode(null);\n    }\n\n    const resetDebuggingHandler = (e: React.MouseEvent) => {\n        setDebuggingMode(resetAutomaton(automaton, testWord));\n    }\n\n    const stepBackwardHandler = (e: React.MouseEvent) => {\n        setDebuggingMode(previousSymbol(automaton, debuggingMode!));\n    }\n\n    const stepForwardHandler = (e: React.MouseEvent) => {\n        setDebuggingMode(nextSymbol(automaton, debuggingMode!));\n    }\n\n    const fastForwardHandler = (e: React.MouseEvent) => {\n        setDebuggingMode({\n            currentStates: debuggingMode!.currentStates,\n            testWord: debuggingMode!.testWord,\n            nextSymbolIndex: debuggingMode!.nextSymbolIndex,\n            iteratingUntilEnd: true,\n        });\n    }\n\n    useEffect(() => {\n        let intervalId: number | undefined;\n\n        if (debuggingMode && debuggingMode.iteratingUntilEnd) {\n            intervalId = window.setInterval(() => setDebuggingMode(nextSymbol(automaton, debuggingMode)), 750);\n        } else if (intervalId) {\n            clearInterval(intervalId);\n        }\n\n        return () => clearInterval(intervalId);\n    }, [debuggingMode, automaton]);\n\n    /** TODO:\n     * curved links - to organise them better in the screen\n     */\n    return (\n        <div className=\"automaton-designer\">\n            <div className=\"toolbar\">\n                {debuggingMode\n                    ? <span className=\"ant-input-affix-wrapper debugging-symbols\">{\n                        debuggingMode.testWord.split('').map((symbol, index) => {\n                            const symbolClass = classNames({\n                                consumed: index < debuggingMode.nextSymbolIndex,\n                                current: index === debuggingMode.nextSymbolIndex,\n                            });\n\n                            return <span className={symbolClass}>{symbol}</span>;\n                        })\n                    }\n                    </span>\n                    : <Input\n                        placeholder=\"Write your test word\"\n                        disabled={debuggingMode != null}\n                        value={testWord}\n                        suffix={\n                            <Icon\n                                type={testWord && isWordInLanguage(automaton, testWord) ? 'check' : 'close'}\n                                style={{ display: (!testWord ? 'none' : 'inherit') }} />\n                        }\n                        onChange={(e) => setTestWord(e.target.value)}\n                    />\n                }\n\n                <Tooltip title=\"Start debugging\">\n                    {debuggingMode\n                        ? <Button icon=\"stop\" onClick={stopDebuggingHandler} />\n                        : <Button icon=\"bug\" disabled={!canRunAutomaton(automaton)} onClick={startDebuggingHandler} />}\n                </Tooltip>\n\n                <Tooltip title=\"Reset the automaton and go back to the beginning of the input sequence\">\n                    <Button icon=\"fast-backward\" disabled={!debuggingMode} onClick={resetDebuggingHandler} />\n                </Tooltip>\n\n                <Tooltip title=\"Go back one symbol\">\n                    <Button icon=\"step-backward\" disabled={!debuggingMode} onClick={stepBackwardHandler} />\n                </Tooltip>\n\n                <Tooltip title=\"Consume the next input symbol in the sequence\">\n                    <Button icon=\"step-forward\" disabled={!debuggingMode} onClick={stepForwardHandler} />\n                </Tooltip>\n\n                <Tooltip title=\"Consume all remaining input symbols\">\n                    <Button icon=\"fast-forward\" disabled={!debuggingMode} onClick={fastForwardHandler} />\n                </Tooltip>\n            </div>\n\n            <div className=\"container\">\n                <Hotkeys\n                    keyName=\"delete,shift+a,shift+i\"\n                    onKeyUp={keyUpHandler}\n                >\n                    <svg\n                        onDoubleClick={doubleClickHandler}\n                        onMouseDown={mouseDownHandler}\n                        onMouseUp={mouseUpHandler}\n                        onMouseLeave={mouseLeaveHandler}\n                        onMouseMove={mouseMoveHandler}\n                    >\n                        {(automaton.states as Array<string>).map(\n                            s => <Node key={s}\n                                automaton={automaton}\n                                state={s}\n                                selected={Boolean(selectedObject && selectedObject.type === ObjectType.NODE && selectedObject.key === s)}\n                                dragging={Boolean(selectedObject && selectedObject.type === ObjectType.NODE && selectedObject.key === s && draggingMode === DraggingMode.DRAGGING)}\n                                current={Boolean(debuggingMode && debuggingMode.currentStates.includes(s))}\n                            />\n                        )}\n                        {groupByTransitions(automaton.transitions).map(\n                            t => {\n                                const edgeKey = `${t.fromState}-${t.toState}`;\n                                return <Edge key={edgeKey} automaton={automaton}\n                                    fromState={t.fromState} toState={t.toState} symbol={t.symbols.sort().join(',')}\n                                    dragging={Boolean(selectedObject && selectedObject.type === ObjectType.EDGE && selectedObject.key === edgeKey && draggingMode === DraggingMode.DRAGGING)}\n                                    selected={Boolean(selectedObject && selectedObject.type === ObjectType.EDGE && selectedObject.key === edgeKey)}\n                                />;\n                            }\n                        )}\n                        {linkingEdge}\n                    </svg>\n                </Hotkeys>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport classNames from 'classnames';\nimport noam from 'noam';\n\nimport { Point, fixed } from '../../../utils/math';\n\nimport './node.css';\n\nexport const Node: React.FC<{\n    automaton: any,\n    state: string,\n    selected: boolean,\n    dragging: boolean,\n    current: boolean\n}> = ({ automaton, state, selected, dragging, current }) => {\n\n    const position: Point = automaton.statePositions[state];\n    const translate = `translate(${fixed(position.x)},${fixed(position.y)})`;\n\n    const isAccepting: boolean = noam.fsm.isAcceptingState(automaton, state);\n    const isInitial: boolean = (automaton.initialState === state);\n\n    const nodeClass = classNames({\n        node: true,\n        dragging: dragging,\n        selected: selected,\n        accept: noam.fsm.isAcceptingState(automaton, state),\n        current: current,\n    });\n\n    var initialStateArrow = null;\n    if (isInitial) {\n        const xOffset = isAccepting ? -4 : 0;\n        initialStateArrow = <polyline points={`${-8 + xOffset},14 ${2 + xOffset},22 ${-8 + xOffset},30`} />;\n    }\n\n    return (\n        <g className={nodeClass} transform={translate} data-state={state}>\n            {initialStateArrow}\n            <circle cx=\"22\" cy=\"22\" r=\"18\" />\n            {isAccepting ? <circle cx=\"22\" cy=\"22\" r=\"22\" /> : null}\n            <text x=\"22\" y=\"27\">{state}</text>\n        </g>\n    );\n};","import { AutomatonDesigner } from './automaton-designer';\n\nexport default AutomatonDesigner;","import { Automata } from './automata';\n\nexport default Automata;","import React, { useState } from 'react';\nimport { Layout } from 'antd';\nimport noam from 'noam';\n\nimport AutomatonDesigner from '../../components/automaton-designer';\n\nimport './automata.css';\n\nexport const Automata: React.FC = () => {\n    const [automaton, setAutomaton] = useState(noam.fsm.makeNew);\n\n    return (\n        <Layout>\n            <h1>Automata</h1>\n            <AutomatonDesigner automaton={automaton} onUpdate={(automaton) => setAutomaton(automaton)} />\n        </Layout>\n    );\n}","import React from 'react';\nimport { Layout, Menu } from 'antd';\nimport { HashRouter, Route, Link, withRouter } from 'react-router-dom';\n\nimport RegularLanguage from '../../routes/regular-language';\nimport Automata from '../../routes/automata';\n\nimport logo from '../../assets/logo.svg';\n\nimport './app.css';\n\nconst { Header, Sider, Content } = Layout;\n\nfunction getKeyFromLocation(pathname: string, location: any): string {\n  console.log(pathname, location);\n  if (pathname === '/') {\n    return 'automata';\n  }\n\n  return pathname.substr(1);\n}\n\nconst SiderWithRouter = withRouter(({ location, ...props }) => (\n  <Sider width=\"300px\">\n    <Menu theme=\"dark\" selectedKeys={[getKeyFromLocation(location.pathname, location)]}>\n      <Menu.Item key=\"automata\">\n        <Link to=\"/automata\">Automata</Link>\n      </Menu.Item>\n      <Menu.Item key=\"regular-language\">\n        <Link to=\"/regular-language\">Regular language</Link>\n      </Menu.Item>\n    </Menu>\n  </Sider>\n));\n\nexport const App: React.FC = () => {\n  return (\n    <HashRouter>\n      <Layout>\n        <Header>\n          <div className=\"logo\">\n            <img src={logo} className=\"icon\" alt=\"logo\" />\n            <a href=\".\">Fundamentals of Computing</a>\n          </div>\n          <div className=\"links\">\n            <a href=\"https://github.com/silvafj/focsimulation\">GitHub</a>\n            <a href=\"http://www.dcs.bbk.ac.uk/~michael/foc/foc.html\">Course</a>\n          </div>\n        </Header>\n        <SiderWithRouter />\n        <Content>\n          <Route exact path={[\"/\", \"/automata\"]} component={Automata} />\n          <Route exact path={[\"/regular-language\"]} component={RegularLanguage} />\n        </Content>\n      </Layout>\n    </HashRouter>\n  );\n}","import { App } from './app';\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}