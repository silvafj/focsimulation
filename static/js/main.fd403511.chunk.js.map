{"version":3,"sources":["assets/logo.svg","../node_modules/colors/lib sync","components/test-words/test-words.tsx","components/test-words/index.tsx","components/automaton-viewer/automaton-viewer.tsx","routes/regular-language/regular-language.tsx","components/automaton-viewer/index.tsx","components/regular-expression/regular-expression.tsx","components/regular-expression/index.tsx","routes/regular-language/examples.tsx","routes/regular-language/index.tsx","components/automaton-designer/helpers.tsx","utils/math.tsx","components/automaton-designer/edge/edge.tsx","components/automaton-designer/automaton-designer.tsx","components/automaton-designer/node/node.tsx","components/automaton-designer/help/help.tsx","components/automaton-designer/examples.tsx","components/automaton-designer/index.tsx","routes/automata/index.tsx","routes/automata/automata.tsx","components/app/app.tsx","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","webpackEmptyContext","req","e","Error","code","keys","resolve","id","renderResultsHTML","automaton","words","expected","results","transitions","length","isValidAutomaton","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","str","value","strState","noam","fsm","isStringInLanguage","_unused","push","err","return","join","TestWords","_ref","testAccept","onChange","testType","console","log","react_default","a","createElement","className","toLowerCase","dangerouslySetInnerHTML","__html","input","TextArea","rows","target","split","ExpressionMenuOp","AutomatonViewer","automatonParent","React","createRef","useMemo","Viz","Module","render","renderSVGElement","printDotFormat","then","svgElement","current","firstChild","removeChild","appendChild","catch","error","renderAutomaton","ref","Title","Content","ExpressionHelp","popover","placement","title","content","icon","type","style","color","Examples","expression","acceptWords","rejectWords","RegularLanguage","_useState","useState","_useState2","Object","slicedToArray","setExpression","_useState3","_useState4","setAcceptWords","_useState5","_useState6","setRejectWords","_useMemo","convertStatesToNumbers","minimize","convertNfaToDfa","convertEnfaToNfa","re","string","toAutomaton","name","generateAutomaton","_useMemo2","layout","dropdown","trigger","overlay","menu","onClick","click","key","RANDOM","simplify","random","SIMPLIFY","startsWith","index","Number","Item","SubMenu_default","map","v","i","concat","es_button","size","placeholder","prefix","suffix","tooltip","message","display","event","components_test_words","components_automaton_viewer","getMousePosition","offset","arguments","x","y","CTM","currentTarget","getScreenCTM","clientX","clientY","f","d","getStateFromElement","element","SVGGElement","classList","contains","dataset","state","parentElement","getTransitionFromElement","from","to","symbol","getStatePosition","position","statePositions","get","setAcceptingState","accepting","isAcceptingState","addAcceptingState","acceptingStates","filter","updateTransitions","transition","newSymbol","transitionAngle","newArr","Boolean","oldArr","alphabet","includes","addSymbol","addTransition","transitionAngles","Map","set","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","fromState","toStates","splice","s","fixed","number","toFixed","replace","angleOfLine","center","point","offsetAngle","anchorAngle","Math","atan2","PI","closestPointOnCircle","circle","dx","cx","dy","cy","scale","sqrt","r","getStateRadius","ObjectType","DraggingMode","Edge","_ref2","start","end","toState","mousePosition","selected","dragging","pathD","fromRadius","mpoint","arrow","label","lineto","edge_EdgeArrow","angle","textAngle","edge_EdgeLabel","text","stuff","radius","circleX","cos","circleY","sin","circleRadius","startAngle","endAngle","startX","startY","endX","endY","getEndPointsAndCircle","useGreaterThan180","abs","arc","edgeClass","classNames","edge","linking","dataProps","data-from","data-to","data-symbol","assign","EdgeArrow","_ref3","commands","EdgeLabel","_ref4","adjustX","adjustY","slide","pow","round","Node","translate","isAccepting","isInitial","initialState","nodeClass","node","accept","initialStateArrow","xOffset","points","transform","data-state","Help","actions","Fragment","Array","action","hint","testWord","states","canRunAutomaton","nextSymbol","db","nextSymbolIndex","currentStates","makeTransition","iteratingUntilEnd","isWordInLanguage","word","AutomatonDesigner","onUpdate","selectedObject","setSelectedObject","draggingMode","setDraggingMode","draggingOffset","setDraggingOffset","_useState7","_useState8","mouseLocation","setMouseLocation","_useState9","_useState10","debuggingMode","setDebuggingMode","_useState11","_useState12","setTestWord","linkingEdge","NODE","LINKING","edge_Edge","resetDebuggingHandler","computeEpsilonClosure","resetAutomaton","useEffect","intervalId","window","setInterval","clearInterval","disabled","menu_default","clone","symbolClass","consumed","readString","substring","previousSymbol","lib_esm","keyName","onKeyUp","shortcut","handle","delete","t","removeState","EDGE","_key$split","_key$split2","removeTransition","onDoubleClick","prompt","nextState","reduce","acc","max","parseInt","substr","getNextState","addState","setInitialState","onMouseDown","currentPosition","shiftKey","DRAGGING","statePosition","onMouseUp","onMouseLeave","onMouseMove","node_Node","unpacked","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","item","symbols","values","groupByTransitions","edgeKey","sort","help_Help","Automata","makeNew","setAutomaton","components_automaton_designer","Header","Layout","Sider","ReactGA","initialize","withTracker","WrappedComponent","options","props","page","location","pathname","objectSpread","pageview","SiderWithRouter","withRouter","objectWithoutProperties","width","theme","selectedKeys","react_router_dom","App","src","logo","alt","href","app_Content","react_router","exact","path","component","hostname","match","ReactDOM","components_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd403511.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 152;","import React from 'react';\nimport { Input } from 'antd';\nimport noam from 'noam';\n\nimport './test-words.css';\n\nfunction isValidAutomaton(automaton: any): boolean {\n    return automaton && automaton.transitions.length > 0;\n}\n\nfunction renderResultsHTML(automaton: any, words: Array<string>, expected: boolean): string {\n    var results: Array<string> = [];\n\n    if (!isValidAutomaton(automaton)) {\n        return '';\n    }\n\n    for (let str of words) {\n        var strState: string = expected ? 'invalid' : 'valid';\n\n        try {\n            if (noam.fsm.isStringInLanguage(automaton, str)) {\n                strState = expected ? 'valid' : 'invalid';\n            }\n        } catch {\n            //\n        }\n\n        results.push('<span class=\"' + strState + '\">' + str + '</span>');\n    }\n\n    return results.join('');\n}\n\nexport const TestWords: React.FC<{\n    automaton: any,\n    words: Array<string>,\n    testAccept: boolean,\n    onChange: (words: Array<string>) => void,\n}> = ({ automaton, words, testAccept, onChange }) => {\n    const testType: string = (testAccept ? 'Accept' : 'Reject');\n    console.log(words);\n\n    return (\n        <div className={'test-words ' + testType.toLowerCase()}>\n            <h2>{testType}</h2>\n\n            <div className=\"container\">\n                <div className=\"backdrop\">\n                    <div className=\"highlights\" dangerouslySetInnerHTML={{\n                        __html:\n                            renderResultsHTML(automaton, words, testAccept)\n                    }}>\n                    </div>\n                </div>\n                <Input.TextArea\n                    rows={8}\n                    value={words.join('\\n')}\n                    onChange={e => onChange(e.target.value.split('\\n'))}\n                />\n            </div>\n        </div>\n    );\n}","import { TestWords } from './test-words';\n\nexport default TestWords;","import React, { useMemo } from 'react';\nimport noam from 'noam';\nimport Viz from 'viz.js';\nimport { Module, render } from 'viz.js/full.render.js';\n\nimport './automaton-viewer.css';\n\nfunction isValidAutomaton(automaton: any): boolean {\n    return automaton && automaton.transitions.length > 0;\n}\n\nfunction renderAutomaton(automaton: any, automatonParent: React.RefObject<HTMLDivElement>): void {\n    if (!isValidAutomaton(automaton)) {\n        return;\n    }\n\n    (new Viz({ Module, render }))\n        .renderSVGElement(noam.fsm.printDotFormat(automaton))\n        .then((svgElement) => {\n            if (!automatonParent.current) {\n                return;\n            }\n\n            while (automatonParent.current.firstChild) {\n                automatonParent.current.removeChild(automatonParent.current.firstChild);\n            }\n\n            if (isValidAutomaton(automaton)) {\n                automatonParent.current.appendChild(svgElement);\n            }\n        })\n        .catch(error => {\n            console.error(error);\n        });\n}\n\nexport const AutomatonViewer: React.FC<{ automaton: any }> = ({ automaton }) => {\n    const automatonParent: React.RefObject<HTMLDivElement> = React.createRef();\n\n    // Rendering the automaton is done directly and bypasss React reconciliation\n    // Avoid rendering if the automaton has not changed\n    useMemo(() => renderAutomaton(automaton, automatonParent), [automaton]);\n\n    return (\n        <div className=\"automaton-viewer-container\" ref={automatonParent} />\n    );\n}","import React, { useState, useMemo } from 'react';\nimport {\n    Dropdown,\n    Icon,\n    Input,\n    Layout,\n    Menu,\n    Tooltip,\n    Button,\n} from 'antd';\nimport { ClickParam } from \"antd/lib/menu\"\nimport SubMenu from 'antd/lib/menu/SubMenu';\n\nimport noam from 'noam';\n\nimport TestWords from '../../components/test-words';\nimport AutomatonViewer from '../../components/automaton-viewer';\nimport ExpressionHelp from '../../components/regular-expression';\nimport { Examples } from './examples';\n\nimport './regular-language.css';\n\nfunction generateAutomaton(expression: string): any {\n    try {\n        const automaton = noam.fsm.convertStatesToNumbers(\n            noam.fsm.minimize(\n                noam.fsm.convertNfaToDfa(\n                    noam.fsm.convertEnfaToNfa(\n                        noam.re.string.toAutomaton(expression)))));\n\n        return [automaton, null];\n    } catch (error) {\n        if (error.name === \"RegexError\") {\n            return [null, error];\n        }\n    }\n\n    return;\n}\n\nenum ExpressionMenuOp {\n    RANDOM = \"random\",\n    SIMPLIFY = \"simplify\",\n}\n\nexport const RegularLanguage: React.FC = () => {\n    const [expression, setExpression] = useState('');\n    const [acceptWords, setAcceptWords] = useState<Array<string>>([]);\n    const [rejectWords, setRejectWords] = useState<Array<string>>([]);\n\n    // Avoid generating a new automaton between renders for the same expression\n    const [automaton, error] = useMemo(() => generateAutomaton(expression), [expression]);\n\n    const handleExpressionMenuClick = (click: ClickParam) => {\n        switch (click.key) {\n            case ExpressionMenuOp.RANDOM: {\n                setExpression(\n                    noam.re.string.simplify(\n                        noam.re.string.random(5, \"ab\", {})));\n                break;\n            }\n            case ExpressionMenuOp.SIMPLIFY: {\n                /** TODO:\n                 * write the simplify steps to the log\n                 * allow debugging the simplification with step forward and explanation\n                 */\n                setExpression(noam.re.string.simplify(expression));\n                break;\n            }\n        }\n\n        if (click.key.startsWith('example')) {\n            const index = Number(click.key.split('-')[1]);\n            setExpression(Examples[index].expression);\n            setAcceptWords(Examples[index].acceptWords);\n            setRejectWords(Examples[index].rejectWords);\n        }\n    }\n\n    return (\n        <Layout>\n            <h1>Expression</h1>\n            <div className=\"toolbar\">\n                <Dropdown\n                    placement=\"bottomLeft\"\n                    trigger={['click']}\n                    overlay={\n                        <Menu onClick={handleExpressionMenuClick}>\n                            <Menu.Item key={ExpressionMenuOp.RANDOM}>Generate random expression</Menu.Item>\n                            <Menu.Item key={ExpressionMenuOp.SIMPLIFY}>Simplify expression</Menu.Item>\n                            <SubMenu title=\"Examples\">\n                                {\n                                    Examples.map((v, i) => <Menu.Item key={`example-${i}`}>{v.title}</Menu.Item>)\n                                }\n                            </SubMenu>\n                        </Menu>\n                    }>\n                    <Button icon=\"menu\" size=\"large\" />\n                </Dropdown>\n\n                <Input size=\"large\" placeholder=\"Write your regular expression\"\n                    value={expression}\n                    prefix={ExpressionHelp}\n                    suffix={\n                        <Tooltip placement=\"topRight\" title={error ? error.message : ''}>\n                            <Icon type=\"close\" style={{ color: 'red', display: (!error ? 'none' : 'inherit') }} />\n                        </Tooltip>\n                    }\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => setExpression(event.target.value)}\n                />\n            </div>\n            <h1>Words</h1>\n            <TestWords automaton={automaton} words={acceptWords} testAccept={true} onChange={words => setAcceptWords(words)} />\n            <TestWords automaton={automaton} words={rejectWords} testAccept={false} onChange={words => setRejectWords(words)} />\n            <h1>Deterministic Finite Automaton</h1>\n            <AutomatonViewer automaton={automaton} />\n        </Layout>\n    );\n}","import {AutomatonViewer} from './automaton-viewer';\n\nexport default AutomatonViewer;","import React from 'react';\nimport { Icon, Popover } from 'antd';\n\nconst Title = (\n    <span>What is a regular expression?</span>\n);\n\nconst Content = (\n    <div>\n        <p>A regular expression (over an alphabet Σ) is a string consisting of symbols from Σ, plus symbols from the list <em>+</em>, <em>*</em>, <em>(</em>, <em>)</em>, <em>$</em>.</p>\n        <ul>\n            <li><strong>+</strong> (alteration operator, ∪)</li>\n            <li><strong>∗</strong> (Kleene star); 0 or more symbols</li>\n            <li><strong>(</strong>; start grouping</li>\n            <li><strong>)</strong>; end grouping</li>\n            <li><strong>$</strong> (epsilon, ε); empty string</li>\n            <li><strong>\\</strong> (backslash); used for escaping the special meaning of all the listed characters, including backslash itself</li>\n        </ul>\n\n        <p>Example: <code>a(a+b)*</code></p>\n        <p>= all words starting with a, followed by any word over {'{a, b}'}</p>\n        <p>= all words over the alphabet {'{a, b}'} starting with a</p>\n    </div>\n);\n\nexport const ExpressionHelp = (\n    <Popover placement=\"rightTop\"\n        title={Title}\n        content={Content}>\n        <Icon type=\"question-circle\" style={{ color: 'rgba(0,0,0,.45)' }} />\n    </Popover>\n);","import { ExpressionHelp } from './regular-expression';\n\nexport default ExpressionHelp;","type ExpressionExample = {\n    title: string,\n    expression: string,\n    acceptWords: Array<string>,\n    rejectWords: Array<string>,\n}\n\nexport const Examples: Array<ExpressionExample> = [\n    {\n        title: 'ab',\n        expression: 'ab(ab)*',\n        acceptWords: [\n            'ab',\n            'abab',\n            'ababab',\n        ],\n        rejectWords: [\n            'a',\n            'b',\n            'aba',\n            'ba',\n            'bb',\n            'ababb',\n        ],\n    }\n];","import { RegularLanguage } from './regular-language';\n\nexport default RegularLanguage;","import noam from 'noam';\n\nimport { Point } from '../../utils/math';\n\nexport function getMousePosition(e: React.MouseEvent, offset: Point = { x: 0, y: 0 }): Point {\n    const svg = e.currentTarget as SVGSVGElement;\n    const CTM = svg.getScreenCTM() as DOMMatrix;\n\n    return {\n        x: (e.clientX - CTM.e + offset.x) / CTM.a,\n        y: (e.clientY - CTM.f + offset.y) / CTM.d\n    };\n}\n\nexport function getStateFromElement(element: Element): string | null {\n    if (element instanceof SVGGElement && element.classList.contains('node')) {\n        return element.dataset.state || null;\n    } else if (element.parentElement instanceof SVGGElement) {\n        return getStateFromElement(element.parentElement);\n    } else {\n        return null;\n    }\n}\n\nexport function getTransitionFromElement(element: Element): { from: string, to: string, symbol: string } | null {\n    if (element instanceof SVGGElement && element.classList.contains('edge')) {\n        return {\n            from: element.dataset.from || '',\n            to: element.dataset.to || '',\n            symbol: element.dataset.symbol || '',\n        }\n    } else if (element.parentElement instanceof SVGGElement) {\n        return getTransitionFromElement(element.parentElement);\n    } else {\n        return null;\n    }\n}\n\nexport function getStatePosition(automaton: any, state: string): Point {\n    const position = automaton.statePositions.get(state);\n    return {\n        x: position.x + 22,\n        y: position.y + 22,\n    }\n}\n\nexport function getNextState(automaton: any): string {\n    const nextState: number = automaton.states.reduce(\n        (acc: number, state: string) => Math.max(acc, parseInt(state.substr(1))), -1);\n    return 's' + (nextState + 1);\n}\n\nexport function setAcceptingState(automaton: any, state: string, accepting: boolean): void {\n    if (accepting) {\n        if (!noam.fsm.isAcceptingState(automaton, state)) {\n            noam.fsm.addAcceptingState(automaton, state);\n        }\n    } else {\n        automaton.acceptingStates = automaton.acceptingStates.filter((e: string) => e !== state);\n    }\n}\n\nexport function addState(automaton: any, state: string, position: Point): void {\n    noam.fsm.addState(automaton, state);\n    if (!automaton.statePositions) {\n        automaton.statePositions = new Map<string, Point>();\n    }\n\n    automaton.statePositions.set(state, position);\n\n    if (automaton.states.length === 1) {\n        noam.fsm.setInitialState(automaton, state);\n    }\n}\n\nexport function removeState(automaton: any, state: string): void {\n    if (automaton.initialState === state) {\n        automaton.initialState = '';\n    }\n    automaton.states = automaton.states.filter((s: string) => s !== state);\n    automaton.statePositions.delete(state);\n    automaton.acceptingStates = automaton.acceptingStates.filter((s: string) => s !== state);\n    automaton.transitions.map((t: NoamAutomatonTransition) => t.toStates.filter((s: string) => s !== state));\n    automaton.transitions = automaton.transitions.filter(\n        (t: NoamAutomatonTransition) => (t.fromState !== state) &&\n            t.toStates.length > 0 &&\n            !(t.toStates.length === 1 && t.toStates.includes(state)));\n}\n\nexport function removeTransition(automaton: any, key: string): void {\n    automaton.transitionAngles.delete(key);\n\n    const [fromState, toState] = key.split('-');\n    automaton.transitions = automaton.transitions.filter(\n        (t: NoamAutomatonTransition) => !(t.fromState === fromState && t.toStates.length === 1 && t.toStates.includes(toState)));\n\n}\n\nexport function updateTransitions(\n    automaton: any,\n    transition: { from: string, to: string, symbol: string },\n    newSymbol: string,\n    transitionAngle?: number,\n): any {\n    const newArr = newSymbol.split(',').filter(Boolean);\n    const oldArr = transition.symbol.split(',').filter(Boolean);\n\n    // Add transitions\n    for (const symbol of newArr) {\n        if (!automaton.alphabet.includes(symbol)) {\n            noam.fsm.addSymbol(automaton, symbol);\n        }\n\n        noam.fsm.addTransition(automaton, transition.from, [transition.to], symbol);\n\n        if (transitionAngle) {\n            if (!automaton.transitionAngles) {\n                automaton.transitionAngles = new Map<string, number>();\n            }\n            automaton.transitionAngles.set(`${transition.from}-${transition.to}`, transitionAngle);\n        }\n    }\n\n    // Remove transitions\n    for (const symbol of oldArr) {\n        if (newArr.includes(symbol)) {\n            continue;\n        }\n\n        for (const index in (automaton.transitions as NoamAutomatonTransitions)) {\n            const value = automaton.transitions[index] as NoamAutomatonTransition;\n            if (value.fromState !== transition.from || !value.toStates.includes(transition.to) || value.symbol !== symbol) {\n                continue;\n            }\n\n            if (value.toStates.length === 1) {\n                automaton.transitions.splice(index, 1);\n            } else {\n                automaton.transitions[index] = value.toStates.filter((s: string) => s !== transition.to);\n            }\n        }\n    }\n\n    return automaton;\n}\n\ntype NoamAutomatonTransition = { fromState: string, toStates: Array<string>, symbol: string };\ntype NoamAutomatonTransitions = Array<NoamAutomatonTransition>;\n\nexport function groupByTransitions(transitions: NoamAutomatonTransitions):\n    Array<{ fromState: string, toState: string, symbols: Array<string> }> {\n\n    const unpacked = []\n    for (const transition of transitions) {\n        for (const toState of transition.toStates) {\n            unpacked.push({\n                fromState: transition.fromState,\n                toState: toState,\n                symbol: transition.symbol\n            });\n        }\n    }\n\n    return Array.from(\n        unpacked.reduce((acc, t) => {\n            const key = t.fromState + '-' + t.toState;\n\n            const item: { fromState: string, toState: string, symbols: Array<string> } = acc.get(key) || {\n                fromState: t.fromState,\n                toState: t.toState,\n                symbols: []\n            };\n\n            item.symbols.push(t.symbol);\n\n            return acc.set(key, item);\n        }, new Map<string, { fromState: string, toState: string, symbols: Array<string> }>()).values());\n}","export type Point = {\n    readonly x: number;\n    readonly y: number;\n}\n\nexport type Circle = {\n    readonly cx: number;\n    readonly cy: number;\n    readonly r: number;\n}\n\n/**\n * Return a number with 2 digits precision on the fraction part.\n * \n * @param number \n */\nexport function fixed(number: number): string {\n    return number.toFixed(2).replace(/0+$/, '').replace(/\\.$/, '');\n}\n\n/**\n * Return the midpoint between two points.\n * \n * @param start\n * @param end\n */\nexport function midpoint(start: Point, end: Point): Point {\n    return {\n        x: (start.x + end.x) / 2,\n        y: (start.y + end.y) / 2,\n    }\n}\n\n/**\n * Return the angle of the line defined by two points and the horizontal axis.\n * \n * @param center \n * @param point \n * @param offsetAngle \n */\nexport function angleOfLine(center: Point, point: Point, offsetAngle: number = 0): number {\n    var anchorAngle = Math.atan2(point.y - center.y, point.x - center.x) + offsetAngle;\n    if (anchorAngle < -Math.PI) {\n        anchorAngle += 2 * Math.PI;\n    }\n\n    if (anchorAngle > Math.PI) {\n        anchorAngle -= 2 * Math.PI;\n    }\n    return anchorAngle;\n};\n\n\n/**\n * Return the point within a circle that is closest to the specific point.\n * \n * @param circle \n * @param point \n */\nexport function closestPointOnCircle(circle: Circle, point: Point): Point {\n    var dx = point.x - circle.cx;\n    var dy = point.y - circle.cy;\n    var scale = Math.sqrt(dx * dx + dy * dy);\n\n    return {\n        x: circle.cx + dx * circle.r / scale,\n        y: circle.cy + dy * circle.r / scale,\n    };\n};","import React from 'react';\nimport classNames from 'classnames';\nimport noam from 'noam';\n\nimport {\n    getStatePosition,\n} from '../helpers';\nimport {\n    Point,\n    fixed,\n    midpoint,\n    closestPointOnCircle,\n    angleOfLine,\n} from '../../../utils/math';\n\nimport './edge.css';\n\nfunction getStateRadius(automaton: any, state: string): number {\n    return noam.fsm.isAcceptingState(automaton, state) ? 22 : 18;\n}\n\n/**\n * Returns the commands required to draw a line with SVG path element.\n *\n * @param from\n * @param to\n */\nfunction lineto(from: Point, to: Point): Array<string> {\n    // The \"lineto\" commands\n    // https://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands\n    return [\n        `M${fixed(from.x)},${fixed(from.y)}`, // starting point\n        `L${fixed(to.x)},${fixed(to.y)}`, // end point\n    ]\n}\n\n/**\n * Returns the commands required to draw an arc with SVG path element.\n *\n * @param x\n * @param y\n * @param radius\n * @param startAngle\n * @param endAngle\n * @param isReversed\n */\nfunction arc(\n    x: number,\n    y: number,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n    isReversed: Boolean = false,\n): Array<string> {\n    if (isReversed) {\n        [startAngle, endAngle] = [endAngle, startAngle];\n    }\n\n    if (endAngle < startAngle) {\n        endAngle += Math.PI * 2;\n    }\n\n    const startX = x + radius * Math.cos(startAngle);\n    const startY = y + radius * Math.sin(startAngle);\n    const endX = x + radius * Math.cos(endAngle);\n    const endY = y + radius * Math.sin(endAngle);\n    const useGreaterThan180 = (Math.abs(endAngle - startAngle) > Math.PI) ? '1' : '0';\n\n    // The elliptical arc curve commands\n    // https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\n    return [\n        `M${fixed(startX)},${fixed(startY)}`, // starting point\n        `A${fixed(radius)},${fixed(radius)}`, // radii\n        '0', // perfect circle\n        useGreaterThan180 ? '1' : '0', // large-arc-flag\n        '1', // sweep-flag, arc drawn in a positive angle\n        `${fixed(endX)},${fixed(endY)}`, // end point\n    ];\n}\n\nfunction getEndPointsAndCircle(circle: Point, radius: number, anchorAngle: number) {\n    const circleX = circle.x + 1.5 * radius * Math.cos(anchorAngle);\n    const circleY = circle.y + 1.5 * radius * Math.sin(anchorAngle);\n    const circleRadius = 0.75 * radius;\n    const startAngle = anchorAngle - Math.PI * 0.8;\n    const endAngle = anchorAngle + Math.PI * 0.8;\n    const startX = circleX + circleRadius * Math.cos(startAngle);\n    const startY = circleY + circleRadius * Math.sin(startAngle);\n    const endX = circleX + circleRadius * Math.cos(endAngle);\n    const endY = circleY + circleRadius * Math.sin(endAngle);\n\n    return {\n        startX: startX,\n        startY: startY,\n        endX: endX,\n        endY: endY,\n        startAngle: startAngle,\n        endAngle: endAngle,\n        circleX: circleX,\n        circleY: circleY,\n        circleRadius: circleRadius\n    };\n};\n\nexport const Edge: React.FC<{\n    automaton: any,\n    fromState: string,\n    toState?: string | null,\n    symbol?: string,\n    mousePosition?: Point,\n    selected: boolean,\n    dragging: boolean,\n}> = ({ automaton, fromState, toState, symbol, mousePosition, selected, dragging }) => {\n    var pathD: Array<string> = [];\n\n    var from = getStatePosition(automaton, fromState);\n    const fromRadius = getStateRadius(automaton, fromState);\n    var to = toState ? getStatePosition(automaton, toState) : mousePosition!;\n    const mpoint = mousePosition || midpoint(from, to);\n\n    var arrow = null;\n    var label = null;\n\n    if (fromState !== toState) {\n        from = closestPointOnCircle({ cx: from.x, cy: from.y, r: fromRadius }, mpoint);\n        to = toState ? closestPointOnCircle({ cx: to.x, cy: to.y, r: getStateRadius(automaton, toState) }, from) : mpoint;\n\n        // TODO: arc edges between two nodes\n\n        // const anchorAngle: number = toState && automaton.transitionAngles ? automaton.transitionAngles.get(`${fromState}-${toState}`) : 0;\n        // if (anchorAngle) {\n        //     const stuff = getEndPointsAndCircle(from, fromRadius, anchorAngle);\n        //     pathD = arc(stuff.circleX, stuff.circleY, stuff.circleRadius, stuff.startAngle, stuff.endAngle);\n        // } else {\n        pathD = lineto(from, to);\n        // }\n\n        arrow = <EdgeArrow point={to} angle={Math.atan2(to.y - from.y, to.x - from.x)} />;\n\n        var textAngle = Math.atan2(to.x - from.x, from.y - to.y);\n        label = <EdgeLabel point={mpoint} text={symbol || ''} angle={textAngle} />;\n    } else {\n        const anchorAngle = mousePosition ? angleOfLine(from, mousePosition) : automaton.transitionAngles.get(`${fromState}-${toState}`);\n        const stuff = getEndPointsAndCircle(from, fromRadius, anchorAngle);\n\n        pathD = arc(stuff.circleX, stuff.circleY, stuff.circleRadius, stuff.startAngle, stuff.endAngle, false);\n\n        arrow = <EdgeArrow point={{ x: stuff.endX, y: stuff.endY }} angle={stuff.endAngle + Math.PI * 0.4} />;\n\n        label = <EdgeLabel point={{\n            x: stuff.circleX + stuff.circleRadius * Math.cos(anchorAngle),\n            y: stuff.circleY + stuff.circleRadius * Math.sin(anchorAngle),\n        }} text={symbol || ''} angle={anchorAngle} />;\n    }\n\n    const edgeClass = classNames({\n        edge: true,\n        dragging: dragging,\n        selected: selected,\n        linking: mousePosition,\n    })\n\n    var dataProps = {};\n    if (!mousePosition) {\n        dataProps = {\n            'data-from': fromState,\n            'data-to': toState,\n            'data-symbol': symbol,\n        };\n    }\n\n    return (\n        <g className={edgeClass} {...dataProps}>\n            <path className=\"line\" d={pathD.join(' ')} />\n            {arrow}\n            {label}\n        </g>\n    );\n}\n\nconst EdgeArrow: React.FC<{\n    point: Point,\n    angle: number\n}> = ({ point, angle }) => {\n    const dx = Math.cos(angle);\n    const dy = Math.sin(angle);\n\n    const commands: Array<string> = []\n    commands.push(`M${fixed(point.x)},${fixed(point.y)}`);\n    commands.push(`L${fixed(point.x - 8 * dx + 5 * dy)},${fixed(point.y - 8 * dy - 5 * dx)}`);\n    commands.push(`${fixed(point.x - 8 * dx - 5 * dy)},${fixed(point.y - 8 * dy + 5 * dx)}`);\n\n    return (\n        <path className=\"arrow\" d={commands.join(' ')} />\n    );\n}\n\nconst EdgeLabel: React.FC<{\n    point: Point,\n    text: string,\n    angle?: number,\n}> = ({ point, text, angle }) => {\n    var x = point.x;\n    var y = point.y;\n\n    if (angle !== null && angle !== undefined) {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n        const adjustX = 5 * (cos > 0 ? 1 : -1);\n        const adjustY = (10 + 5) * (sin > 0 ? 1 : -1);\n        const slide = sin * Math.pow(Math.abs(sin), 40) * adjustX - cos * Math.pow(Math.abs(cos), 10) * adjustY;\n        x += adjustX - sin * slide;\n        y += adjustY + cos * slide;\n    }\n\n    x = Math.round(x);\n    y = Math.round(y);\n\n    return (\n        <text x={fixed(x)} y={fixed(y + 6)}>{text}</text>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport Hotkeys from 'react-hot-keys';\nimport { HotkeysEvent } from 'hotkeys-js';\nimport { Input, Button, Tooltip, Icon, Dropdown } from 'antd';\nimport Menu, { ClickParam } from 'antd/lib/menu';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport noam from 'noam';\nimport clone from 'clone';\n\nimport { Edge } from './edge/edge';\nimport { Node } from './node/node';\nimport { Help } from './help/help';\nimport {\n    getStateFromElement,\n    getMousePosition,\n    getStatePosition,\n    getTransitionFromElement,\n    groupByTransitions,\n    updateTransitions,\n    addState,\n    removeState,\n    setAcceptingState,\n    getNextState,\n    removeTransition\n} from './helpers';\nimport { Examples } from './examples';\nimport { Point, angleOfLine } from '../../utils/math';\n\nimport './automaton-designer.css';\n\ntype DebuggingMode = {\n    currentStates: Array<string>,\n    testWord: string,\n    nextSymbolIndex: number,\n    iteratingUntilEnd: Boolean,\n};\n\nenum ObjectType { NODE, EDGE }\nenum DraggingMode { DRAGGING, LINKING }\n\nfunction canRunAutomaton(automaton: any): Boolean {\n    return automaton.states.length > 0 && automaton.initialState;\n}\n\nfunction resetAutomaton(automaton: any, word: string): DebuggingMode {\n    return {\n        currentStates: noam.fsm.computeEpsilonClosure(automaton, [automaton.initialState]),\n        testWord: word,\n        nextSymbolIndex: 0,\n        iteratingUntilEnd: false,\n    };\n}\n\nfunction previousSymbol(automaton: any, db: DebuggingMode): DebuggingMode {\n    if (db.nextSymbolIndex <= 0) {\n        return db;\n    }\n\n    return {\n        currentStates: noam.fsm.readString(automaton, db.testWord.substring(0, db.nextSymbolIndex - 1).split('')),\n        testWord: db.testWord,\n        nextSymbolIndex: db.nextSymbolIndex - 1,\n        iteratingUntilEnd: false,\n    };\n}\n\nfunction nextSymbol(automaton: any, db: DebuggingMode): DebuggingMode {\n    if (db.nextSymbolIndex >= db.testWord.length) {\n        return db;\n    }\n\n    return {\n        currentStates: noam.fsm.makeTransition(automaton, db.currentStates, db.testWord[db.nextSymbolIndex]),\n        testWord: db.testWord,\n        nextSymbolIndex: db.nextSymbolIndex + 1,\n        iteratingUntilEnd: db.iteratingUntilEnd,\n    };\n}\n\nfunction isWordInLanguage(automaton: any, word: string): Boolean {\n    try {\n        return noam.fsm.isStringInLanguage(automaton, word);\n    } catch {\n        return false;\n    }\n}\n\nexport const AutomatonDesigner: React.FC<{ automaton: any, onUpdate: (automaton: any) => void }> = ({ automaton, onUpdate }) => {\n\n    const [selectedObject, setSelectedObject] = useState<{ type: ObjectType, key: string } | null>();\n    const [draggingMode, setDraggingMode] = useState<DraggingMode | null>();\n    const [draggingOffset, setDraggingOffset] = useState<Point>();\n    const [mouseLocation, setMouseLocation] = useState<{ position: Point, state: string | null }>({ position: { x: 0, y: 0 }, state: null });\n    const [debuggingMode, setDebuggingMode] = useState<DebuggingMode | null>();\n    const [testWord, setTestWord] = useState('');\n\n    const doubleClickHandler = (e: React.MouseEvent) => {\n        const element = e.target as Element;\n        automaton = clone(automaton, false);\n\n        const state = getStateFromElement(element);\n        if (state) {\n            setAcceptingState(automaton, state, !noam.fsm.isAcceptingState(automaton, state));\n            setSelectedObject({ type: ObjectType.NODE, key: state });\n        } else {\n            const transition = getTransitionFromElement(element);\n            if (transition) {\n                const symbol = prompt('Modify the transition symbol', transition.symbol);\n                if (symbol !== null) {\n                    automaton = updateTransitions(automaton, transition, symbol || '');\n                }\n                setSelectedObject({ type: ObjectType.EDGE, key: `${transition.from}-${transition.to}` });\n            } else {\n                const nextState = getNextState(automaton);\n                addState(automaton, nextState, getMousePosition(e, { x: -22, y: -22 }));\n                setSelectedObject({ type: ObjectType.NODE, key: nextState });\n            }\n        }\n\n        onUpdate(automaton);\n    }\n\n    const mouseDownHandler = (e: React.MouseEvent) => {\n        const element = e.target as Element;\n        const currentPosition = getMousePosition(e);\n\n        const state = getStateFromElement(element);\n        if (state) {\n            setSelectedObject({ type: ObjectType.NODE, key: state });\n\n            const draggingMode = e.shiftKey ? DraggingMode.LINKING : DraggingMode.DRAGGING;\n            setDraggingMode(draggingMode);\n\n            switch (draggingMode) {\n                case DraggingMode.DRAGGING:\n                    const statePosition = automaton.statePositions.get(state);\n                    setDraggingOffset({\n                        x: statePosition.x - currentPosition.x,\n                        y: statePosition.y - currentPosition.y,\n                    });\n                    break;\n                case DraggingMode.LINKING:\n                    setMouseLocation({ position: currentPosition, state: state });\n                    break;\n            }\n        } else {\n            const transition = getTransitionFromElement(element);\n            if (transition) {\n                setSelectedObject({ type: ObjectType.EDGE, key: `${transition.from}-${transition.to}` });\n            } else {\n                setSelectedObject(null);\n            }\n        }\n    }\n\n    const mouseMoveHandler = (e: React.MouseEvent) => {\n        const element = e.target as Element;\n\n        switch (draggingMode) {\n            case DraggingMode.DRAGGING:\n                automaton = clone(automaton, false);\n                if (selectedObject && selectedObject.type === ObjectType.NODE) {\n                    automaton.statePositions.set(selectedObject.key, getMousePosition(e, draggingOffset));\n                }\n                onUpdate(automaton);\n                break;\n\n            case DraggingMode.LINKING:\n                setMouseLocation({\n                    position: getMousePosition(e),\n                    state: getStateFromElement(element),\n                });\n                break;\n        }\n    }\n\n    const mouseUpHandler = (e: React.MouseEvent) => {\n        const element = e.target as Element;\n\n        if (draggingMode === DraggingMode.LINKING) {\n            const toState = getStateFromElement(element);\n\n            if (toState && selectedObject && selectedObject.type === ObjectType.NODE) {\n                const symbol = prompt(\"What is the transition symbol?\");\n                automaton = clone(automaton, false);\n                automaton = updateTransitions(\n                    automaton,\n                    {\n                        from: selectedObject.key,\n                        to: toState,\n                        symbol: '',\n                    },\n                    symbol || '',\n                    selectedObject.key === toState\n                        ? angleOfLine(getStatePosition(automaton, selectedObject.key), getMousePosition(e))\n                        : 0\n                );\n\n                onUpdate(automaton);\n            }\n        }\n\n        setDraggingMode(null);\n    }\n\n    const mouseLeaveHandler = (e: React.MouseEvent) => {\n        setDraggingMode(null);\n    }\n\n    var linkingEdge = null;\n    if (selectedObject && selectedObject.type === ObjectType.NODE && draggingMode === DraggingMode.LINKING) {\n        linkingEdge = <Edge\n            automaton={automaton}\n            fromState={selectedObject.key}\n            toState={mouseLocation.state}\n            mousePosition={mouseLocation.position}\n            dragging={false}\n            selected={false}\n        />;\n    }\n\n    const keyUpHandler = (shortcut: string, e: KeyboardEvent, handle: HotkeysEvent) => {\n        if (!selectedObject) {\n            return;\n        }\n\n        automaton = clone(automaton, false);\n        switch (shortcut) {\n            case 'delete': // Remove current element\n                setSelectedObject(null);\n                switch (selectedObject.type) {\n                    case ObjectType.NODE:\n                        removeState(automaton, selectedObject.key);\n                        break;\n                    case ObjectType.EDGE:\n                        removeTransition(automaton, selectedObject.key);\n                        break;\n                }\n                break;\n\n            case 'shift+a': // Set state accepting\n                if (selectedObject.type === ObjectType.NODE) {\n                    setAcceptingState(automaton, selectedObject.key, !noam.fsm.isAcceptingState(automaton, selectedObject.key));\n                }\n                break;\n\n            case 'shift+i': // Set state as initial\n                if (selectedObject.type === ObjectType.NODE) {\n                    automaton.initialState = selectedObject.key;\n                }\n        }\n\n        onUpdate(automaton);\n    }\n\n    const startDebuggingHandler = (e: React.MouseEvent) => {\n        resetDebuggingHandler(e);\n    }\n\n    const stopDebuggingHandler = (e: React.MouseEvent) => {\n        setDebuggingMode(null);\n    }\n\n    const resetDebuggingHandler = (e: React.MouseEvent) => {\n        setDebuggingMode(resetAutomaton(automaton, testWord));\n    }\n\n    const stepBackwardHandler = (e: React.MouseEvent) => {\n        setDebuggingMode(previousSymbol(automaton, debuggingMode!));\n    }\n\n    const stepForwardHandler = (e: React.MouseEvent) => {\n        setDebuggingMode(nextSymbol(automaton, debuggingMode!));\n    }\n\n    const fastForwardHandler = (e: React.MouseEvent) => {\n        setDebuggingMode({\n            currentStates: debuggingMode!.currentStates,\n            testWord: debuggingMode!.testWord,\n            nextSymbolIndex: debuggingMode!.nextSymbolIndex,\n            iteratingUntilEnd: true,\n        });\n    }\n\n    useEffect(() => {\n        let intervalId: number | undefined;\n\n        if (debuggingMode && debuggingMode.iteratingUntilEnd) {\n            intervalId = window.setInterval(() => setDebuggingMode(nextSymbol(automaton, debuggingMode)), 750);\n        } else if (intervalId) {\n            clearInterval(intervalId);\n        }\n\n        return () => clearInterval(intervalId);\n    }, [debuggingMode, automaton]);\n\n    const handleOptionsMenuClick = (click: ClickParam) => {\n        if (click.key.startsWith('example')) {\n            const index = Number(click.key.split('-')[1]);\n            setTestWord(Examples[index].testWord);\n            onUpdate(clone(Examples[index].automaton, false));\n        }\n    }\n\n    /** TODO:\n     * check if automaton is equivalent to regular expression\n     * add quizes (also to regular language)\n     */\n    return (\n        <div className=\"automaton-designer\">\n            <div className=\"toolbar\">\n                <Dropdown\n                    placement=\"bottomLeft\"\n                    trigger={['click']}\n                    disabled={Boolean(debuggingMode)}\n                    overlay={\n                        <Menu onClick={handleOptionsMenuClick}>\n                            <SubMenu title=\"Examples\">\n                                {\n                                    Examples.map((v, i) => <Menu.Item key={`example-${i}`}>{v.title}</Menu.Item>)\n                                }\n                            </SubMenu>\n                        </Menu>\n                    }>\n                    <Button icon=\"menu\" />\n                </Dropdown>\n\n                {debuggingMode\n                    ? <span className=\"ant-input-affix-wrapper debugging-symbols\">{\n                        debuggingMode.testWord.split('').map((symbol, index) => {\n                            const symbolClass = classNames({\n                                consumed: index < debuggingMode.nextSymbolIndex,\n                                current: index === debuggingMode.nextSymbolIndex,\n                            });\n\n                            return <span key={index} className={symbolClass}>{symbol}</span>;\n                        })\n                    }\n                    </span>\n                    : <Input\n                        placeholder=\"Write your test word\"\n                        disabled={debuggingMode != null}\n                        value={testWord}\n                        suffix={\n                            <Icon\n                                type={testWord && isWordInLanguage(automaton, testWord) ? 'check' : 'close'}\n                                style={{ display: (!testWord ? 'none' : 'inherit') }} />\n                        }\n                        onChange={(e) => setTestWord(e.target.value)}\n                    />\n                }\n\n                <Tooltip title=\"Start debugging\">\n                    {debuggingMode\n                        ? <Button icon=\"stop\" onClick={stopDebuggingHandler} />\n                        : <Button icon=\"bug\" disabled={!canRunAutomaton(automaton)} onClick={startDebuggingHandler} />}\n                </Tooltip>\n\n                <Tooltip title=\"Reset the automaton and go back to the beginning of the input sequence\">\n                    <Button icon=\"fast-backward\" disabled={!debuggingMode} onClick={resetDebuggingHandler} />\n                </Tooltip>\n\n                <Tooltip title=\"Go back one symbol\">\n                    <Button icon=\"step-backward\" disabled={!debuggingMode} onClick={stepBackwardHandler} />\n                </Tooltip>\n\n                <Tooltip title=\"Consume the next input symbol in the sequence\">\n                    <Button icon=\"step-forward\" disabled={!debuggingMode} onClick={stepForwardHandler} />\n                </Tooltip>\n\n                <Tooltip title=\"Consume all remaining input symbols\">\n                    <Button icon=\"fast-forward\" disabled={!debuggingMode} onClick={fastForwardHandler} />\n                </Tooltip>\n            </div>\n\n            <div className=\"container\">\n                <Hotkeys\n                    keyName=\"delete,shift+a,shift+i\"\n                    onKeyUp={keyUpHandler}\n                >\n                    <svg\n                        onDoubleClick={doubleClickHandler}\n                        onMouseDown={mouseDownHandler}\n                        onMouseUp={mouseUpHandler}\n                        onMouseLeave={mouseLeaveHandler}\n                        onMouseMove={mouseMoveHandler}\n                    >\n                        {(automaton.states as Array<string>).map(\n                            s => <Node key={s}\n                                automaton={automaton}\n                                state={s}\n                                selected={Boolean(selectedObject && selectedObject.type === ObjectType.NODE && selectedObject.key === s)}\n                                dragging={Boolean(selectedObject && selectedObject.type === ObjectType.NODE && selectedObject.key === s && draggingMode === DraggingMode.DRAGGING)}\n                                current={Boolean(debuggingMode && debuggingMode.currentStates.includes(s))}\n                            />\n                        )}\n                        {groupByTransitions(automaton.transitions).map(\n                            t => {\n                                const edgeKey = `${t.fromState}-${t.toState}`;\n                                return <Edge key={edgeKey} automaton={automaton}\n                                    fromState={t.fromState} toState={t.toState} symbol={t.symbols.sort().join(',')}\n                                    dragging={Boolean(selectedObject && selectedObject.type === ObjectType.EDGE && selectedObject.key === edgeKey && draggingMode === DraggingMode.DRAGGING)}\n                                    selected={Boolean(selectedObject && selectedObject.type === ObjectType.EDGE && selectedObject.key === edgeKey)}\n                                />;\n                            }\n                        )}\n                        {linkingEdge}\n                    </svg>\n                </Hotkeys>\n                <Help />\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport classNames from 'classnames';\nimport noam from 'noam';\n\nimport { Point, fixed } from '../../../utils/math';\n\nimport './node.css';\n\nexport const Node: React.FC<{\n    automaton: any,\n    state: string,\n    selected: boolean,\n    dragging: boolean,\n    current: boolean\n}> = ({ automaton, state, selected, dragging, current }) => {\n\n    const position: Point = automaton.statePositions.get(state);\n    const translate = `translate(${fixed(position.x)},${fixed(position.y)})`;\n\n    const isAccepting: boolean = noam.fsm.isAcceptingState(automaton, state);\n    const isInitial: boolean = (automaton.initialState === state);\n\n    const nodeClass = classNames({\n        node: true,\n        dragging: dragging,\n        selected: selected,\n        accept: noam.fsm.isAcceptingState(automaton, state),\n        current: current,\n    });\n\n    var initialStateArrow = null;\n    if (isInitial) {\n        const xOffset = isAccepting ? -4 : 0;\n        initialStateArrow = <polyline points={`${-8 + xOffset},14 ${2 + xOffset},22 ${-8 + xOffset},30`} />;\n    }\n\n    return (\n        <g className={nodeClass} transform={translate} data-state={state}>\n            {initialStateArrow}\n            {isAccepting ? <circle cx=\"22\" cy=\"22\" r=\"22\" /> : null}\n            <circle cx=\"22\" cy=\"22\" r=\"18\" />\n            <text x=\"22\" y=\"27\">{state}</text>\n        </g>\n    );\n};","import React from 'react';\nimport { Icon, Popover } from 'antd';\n\nimport './help.css';\n\nexport const Help: React.FC = () => {\n    const actions: Map<string, JSX.Element> = new Map([\n        ['Add a state', <><kbd>🖰 double click</kbd> on empty canvas</>],\n        ['Toggle accept state', <><kbd>🖰 double click</kbd> or <kbd><kbd>shift</kbd> + <kbd>a</kbd></kbd></>],\n        ['Mark state as initial', <><kbd><kbd>shift</kbd> + <kbd>i</kbd></kbd></>],\n        ['Move a state', <><kbd>🖰 click</kbd> and drag</>],\n        ['Add a transition', <><kbd><kbd>shift</kbd> + <kbd>🖰 click</kbd></kbd> and drag</>],\n        ['Delete a state or transition', <><kbd>delete</kbd></>],\n        ['Update a transition symbol', <><kbd>🖰 double click</kbd></>],\n    ]);\n\n    return (\n        <Popover placement=\"rightTop\"\n            title=\"How to use the automaton designer?\"\n            content={\n                <div className=\"automaton-designer-help\">\n                    <ul>{\n                        Array.from(actions, ([action, hint], i) =>\n                            <li key={i}>\n                                <span className=\"action\">{action}</span>\n                                <span className=\"hint\">{hint}</span>\n                            </li>)\n                    }</ul>\n                </div>\n            }>\n            <Icon type=\"question-circle\" />\n        </Popover>\n    );\n}","type NoamAutomaton = {\n    states: Array<string>,\n    alphabet: Array<string>,\n    acceptingStates: Array<string>,\n    initialState: string,\n    transitions: Array<{\n        fromState: string,\n        toStates: Array<string>,\n        symbol: string\n    }>,\n    statePositions: Map<string, {\n        x: number, y: number\n    }>,\n    transitionAngles: Map<string, number>,\n}\n\ntype AutomatonExample = {\n    title: string,\n    testWord: string,\n    automaton: NoamAutomaton,\n}\n\nexport const Examples: Array<AutomatonExample> = [\n    {\n        title: 'DFA ab',\n        testWord: 'ababab',\n        automaton:\n        {\n            states: [\n                's0',\n                's1',\n                's2'\n            ],\n            alphabet: [\n                'a',\n                'b'\n            ],\n            acceptingStates: [\n                's2'\n            ],\n            initialState: 's0',\n            transitions: [\n                {\n                    fromState: 's0',\n                    toStates: [\n                        's1'\n                    ],\n                    symbol: 'a'\n                },\n                {\n                    fromState: 's1',\n                    toStates: [\n                        's2'\n                    ],\n                    symbol: 'b'\n                },\n                {\n                    fromState: 's2',\n                    toStates: [\n                        's1'\n                    ],\n                    symbol: 'a'\n                }\n            ],\n            statePositions: new Map([\n                ['s0', { x: 60, y: 60 }],\n                ['s1', { x: 180, y: 60 }],\n                ['s2', { x: 340, y: 60 }],\n            ]),\n            transitionAngles: new Map([\n                ['s0-s1', 0],\n                ['s1-s2', 0],\n                ['s2-s1', 0],\n                ['s2-s3', 0],\n                ['s3-s2', 0],\n            ]),\n        },\n    },\n];","import { AutomatonDesigner } from './automaton-designer';\n\nexport default AutomatonDesigner;","import { Automata } from './automata';\n\nexport default Automata;","import React, { useState } from 'react';\nimport { Layout } from 'antd';\nimport noam from 'noam';\n\nimport AutomatonDesigner from '../../components/automaton-designer';\n\nimport './automata.css';\n\nexport const Automata: React.FC = () => {\n    const [automaton, setAutomaton] = useState(noam.fsm.makeNew);\n\n    return (\n        <Layout>\n            <AutomatonDesigner automaton={automaton} onUpdate={(automaton) => setAutomaton(automaton)} />\n        </Layout>\n    );\n}","import React, { useEffect } from 'react';\nimport {\n  HashRouter,\n  Link,\n  Route,\n  RouteComponentProps,\n  withRouter,\n} from 'react-router-dom';\nimport ReactGA, { FieldsObject } from 'react-ga';\nimport { Layout, Menu } from 'antd';\n\nimport RegularLanguage from '../../routes/regular-language';\nimport Automata from '../../routes/automata';\n\nimport logo from '../../assets/logo.svg';\n\nimport './app.css';\n\nconst { Header, Sider, Content } = Layout;\n\nReactGA.initialize('UA-50201175-2');\n\nconst withTracker = <P extends RouteComponentProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: FieldsObject = {},\n) => {\n  const trackPage = (page: string) => {\n    ReactGA.set({ page, ...options });\n    ReactGA.pageview(page);\n  };\n\n  return (props: P) => {\n    useEffect(() => {\n      trackPage(props.location.pathname);\n    }, [props.location.pathname]);\n\n    return <WrappedComponent {...props} />;\n  };\n}\n\nfunction getKeyFromLocation(pathname: string, location: any): string {\n  if (pathname === '/') {\n    return 'automata';\n  }\n\n  return pathname.substr(1);\n}\n\nconst SiderWithRouter = withRouter(({ location, ...props }) => (\n  <Sider width=\"300px\">\n    <Menu theme=\"dark\" selectedKeys={[getKeyFromLocation(location.pathname, location)]}>\n      <Menu.Item key=\"automata\">\n        <Link to=\"/automata\">Automata</Link>\n      </Menu.Item>\n      <Menu.Item key=\"regular-language\">\n        <Link to=\"/regular-language\">Regular language</Link>\n      </Menu.Item>\n    </Menu>\n  </Sider>\n));\n\nexport const App: React.FC = () => {\n  return (\n    <HashRouter>\n      <Layout>\n        <Header>\n          <div className=\"logo\">\n            <img src={logo} className=\"icon\" alt=\"logo\" />\n            <a href=\".\">Fundamentals of Computing</a>\n          </div>\n          <div className=\"links\">\n            <a href=\"https://github.com/silvafj/focsimulation\">GitHub</a>\n            <a href=\"http://www.dcs.bbk.ac.uk/~michael/foc/foc.html\">Course</a>\n          </div>\n        </Header>\n        <SiderWithRouter />\n        <Content>\n          <Route exact path={[\"/\", \"/automata\"]} component={withTracker(Automata)} />\n          <Route exact path={[\"/regular-language\"]} component={withTracker(RegularLanguage)} />\n        </Content>\n      </Layout>\n    </HashRouter>\n  );\n}","import { App } from './app';\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}